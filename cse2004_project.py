# -*- coding: utf-8 -*-
"""CSE2004_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10sTrqSUrdJoipijhPA9o-_Jn7dFWS_ho
"""

import pandas as pd
housing = pd.read_csv("housing.csv")
housing.head()

housing.shape

housing.info()

housing.ocean_proximity.value_counts()

import matplotlib.pyplot as plt
housing.hist(bins=50, figsize=(10, 8))
plt.show()

import numpy as np
housing['income_cat'] = pd.cut(housing['median_income'], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1, 2, 3, 4, 5])
housing['income_cat'].hist()
plt.show()

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]
print(strat_test_set['income_cat'].value_counts()*100 / len(strat_test_set))

for set_ in (strat_train_set, strat_test_set):
    set_.drop('income_cat', axis=1, inplace=True)
housing = strat_train_set.copy()

housing.plot(kind='scatter', x='longitude', y='latitude', alpha=0.4, s=housing['population']/100, label='population',
figsize=(12, 8), c='median_house_value', cmap=plt.get_cmap('jet'), colorbar=True)
plt.legend()
plt.show()

corr_matrix = housing.corr()
print(corr_matrix.median_house_value.sort_values(ascending=False))

# Data Preparation
housing = strat_train_set.drop("median_house_value", axis=1)      #X variable
housing_labels = strat_train_set["median_house_value"].copy()     #Y variable


housing_num = housing.drop("ocean_proximity", axis=1)

from sklearn.base import BaseEstimator, TransformerMixin

# column index
rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs
        self.add_bedrooms_per_room = add_bedrooms_per_room
    def fit(self, X, y=None):
        return self  # nothing else to do
    def transform(self, X):
        rooms_per_household =X[:, rooms_ix] / X[:, households_ix]
        population_per_household = X[:, population_ix] / X[:, households_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household,
                         bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
num_pipeline = Pipeline([
    ('imputer',SimpleImputer(strategy="median")),
    ('attribs_adder', CombinedAttributesAdder()),
    ('std_scaler', StandardScaler()),
])

from sklearn.compose import ColumnTransformer
num_attribs = list(housing_num)
cat_attribs = ["ocean_proximity"]
full_pipeline = ColumnTransformer([
    ("num", num_pipeline, num_attribs),
    ("cat", OneHotEncoder(), cat_attribs),
])
housing_prepared = full_pipeline.fit_transform(housing)

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)
 
data = housing.iloc[:5]
labels = housing_labels.iloc[:5]
data_preparation = full_pipeline.transform(data)
print("Predictions: ", lin_reg.predict(data_preparation))

from sklearn.metrics import r2_score
print("The r2 score for linear regression model:",end=" ")
print('%0.4f'%r2_score(y_true = housing_labels, y_pred = lin_reg.predict(housing_prepared)))

from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 2)
X_poly = poly.fit_transform(housing_prepared)
  
poly.fit(X_poly, housing_labels)
lin2 = LinearRegression()
lin2.fit(X_poly, housing_labels)

x_val = []
for i in range(1, 16513):
  x_val.append(i)

plt.scatter(x_val, housing_labels, color = 'blue')
  
plt.scatter(x_val, lin2.predict(X_poly), color = 'red')
plt.title('Polynomial Regression')

r2_SCORE=[]
for i in range(2,6):
    poly=PolynomialFeatures(degree=i)
    I_poly=poly.fit_transform(housing_prepared)
    lini=LinearRegression()
    lini.fit(I_poly,housing_labels)
    print("The r2 score for Polynomial Regression of degree:",i,end=" ")
    r=r2_score(y_true=housing_labels, y_pred=lini.predict(I_poly))
    r2_SCORE.append(r)
    print('%.4f'%r)

y_pt=r2_SCORE
y_pt.insert(0,r2_score(y_true = housing_labels, y_pred = lin_reg.predict(housing_prepared)))
x_pt=[1,2,3,4,5]

plt.plot(x_pt, y_pt,linestyle='dashed', marker='o')
  
# naming the x axis
plt.xlabel('Degree of Polynomial Regression')
# naming the y axis
plt.ylabel('R2 Score')
  
# giving a title to my graph
plt.title('R2 score vs Degree of Polynomial Regression')